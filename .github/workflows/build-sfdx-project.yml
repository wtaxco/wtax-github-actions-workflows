on:
  workflow_call:
    inputs:
      scratch-org-pool-name:
        type: string
        description: Name of the scratch org pool to use for the scratch org
        required: false
      source-directory:
        type: string
        description: Directory containing the main source of the project. Usually force-app, but can be something else. This is used to determine which entry in packageDirectories in sfdx-project.json is the main one. Defaults to force-app.
        required: false
        default: force-app
      run-tests:
        type: string
        description: whether to run the unit tests in source-directory when deploying the code in source-directory. Set to anything other than "yes" to not run tests.
        required: false
        default: yes
      instance-url:
        type: string
        description: Salesforce instance URL to log in to as Dev Hub org
        required: false
        default: https://wtax.my.salesforce.com
      client-id:
        type: string
        description: OAuth client ID (sometimes called consumer key) of the connected app on Salesforce used to connect to the Dev Hub org
        required: false
        default: 3H7cm0QedwevwtVKpSJ4PXeI7kvPanBgB3qK0sBU06E5MSMka3xqeg9JETRkx8Z8PQxuZkUvlMJH10MQ8A9uw
      jwt-key-encrypted:
        type: string
        description: Ansible Vault-encrypted private key to connect to the Dev Hub org with using the JWT flow (this should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: false
        default: |
          $ANSIBLE_VAULT;1.1;AES256
          30346637343332353137343065356231663637333238663665353034653366646632313034343966
          6137363739626132306266376539623935613466363034340a633635323432323362386334323936
          38343736396238323565343535623337386662393065363837343835636336346161376333313033
          6261373663386365370a623130653335313338653135616161356265346366313061653264373736
          39303636353831383036623239346532353161653465613032643238323835363239633430386131
          36383134653230306565366534383566613562306361306132323230616634663437316239646361
          38316162313439323039333632353037626538653839353566373832326663326264383265343238
          31346136303933316131353633346134373436393330666334616431323765336366303735613863
          64333362343031666364336335336631356637343232393234393439653632353863656436343238
          33643231366338343765313237353039646533353461336332373531613430636466646662613363
          37376235313039316463616133393031646332333034643633393165396138336237613031333465
          32303661346365366635376639373230633162623136666166303866376364646234613634643136
          63386532393931356630343337643131396166386162393563383661393561353564623638383838
          63636631646233616462306662366234393436336531343761636232396666363935373065376233
          66623837616361626363613833666630393433373331303638643233633136613664653434326539
          32383962396665386161323536373238363333623061653166656162323361653638633666663832
          31663234656166316661303535376430393635323162613033326233383338313237393635376332
          63396336336361336334643261663432373539333434613664633639663931613531616336316165
          39633437386538306335376131643033386537313166636666303834346439386131363666646366
          34646265303338376263636534643461316335663838333436386438306335323837666163393037
          61333833386234383031363364623032663361343166343137356565613462613532626366626233
          63633830383637643138646531323264316137633936653936326631386261353033393231383637
          65653236343837326134656434643536643230656636663038316535613063636331316461353830
          65303439623066623463303132393438663932616639326433326635376331303233356364643262
          64646261653337346537323235356364336135663834343963633965646638653238623461316633
          37636363626361636232366630383338396365326265303237656235666461626363656564326131
          36333033656532343564323235393636653330396364663632343936656663613236653230666331
          39343066613664303537303638366366393438353832303536326334643734393831373739363135
          38336135643662346434353062643664316331646433353565393561636462303066663765356536
          34303462643133303730346363656365633434633034376162363461353536393762643631666239
          63336339633737666664653338616333353339666534663531333430386164633338623837363536
          39353135306432616664306439373733653963303564373539623739626235313534333563306530
          35386630393630666433613365663935623137343934363664356364393334646462643234636363
          64653464616335333462666436376237653466383539666237336431653734383161326533343166
          34633066393936323330323363336337383932373730313332313830623663656432623236373133
          66376164343161396131333434313063353339626230636637353965323031663266373036323437
          64326462313836323162663333616561383235313330613335323537666664626264353964346231
          61313735353362393630356365313861623635353263366539623438336333636339633434616265
          37346139363632656262393236333961653635373837643136356438646661646534643264636235
          36633263363862393835646334666235356264393438316466643566653136653563376139633738
          36366338326634353336353161636635393234396162316263653730643038353866326331333663
          32386238383630353935376235313736303539393938333232343630616434376565653433316464
          31663730333032336364666336366635343335663464356430373937333336663866356232353332
          32373039313430343439383665343432383337643931653261373664666630313935396138393734
          38653130646637316430343633383964343536333335383933303766383837366564636333326539
          35363164623761613431306331356561393835666665663130643162393238333338383833383336
          35336530323638363563396334393264316430363665356333376463396232626134656264323937
          35653933316434336132653330666364633734373963303038393637376662323032333631326635
          62626133323836326134313565636265613761626435623461646436356464393463366161366131
          62353263333735343363303461356533386538656566653436343761303763336334393734343139
          66646634373537346531663138306233663463346535393638376264393163636230363930393431
          31356635393736383866363766346630363636393832396437363639623531393261656661386637
          30303362363435643766333363653337343831373939663032663339323433323165646133366530
          32336462303965656230313734346265343765623463666331666661313764626237323661313364
          34316532326133383362326638653930653138336261383632623061366565643430626533386236
          35346332633036336133376161373730306639653539396464316162366539626366643630376361
          38353237356338363435656361333232653763313537376363613639383432373939396638646266
          34313439623964613266343830326432336135316337383664336239636166386435663338363237
          64343533636461616434313038643461396134663561366232356435336334626332663932303165
          36363230336232336464326235356232363632373238613433343163663632393764653866323634
          64313966373565373764663835353437643635626431366338306634356461303432346465323766
          31353762616365623734633361356438656366656435343238613336663365636437306637626363
          31323433346632653533666266323634303538303066626166316635346639353336326266636165
          32316230626365386533363738633466633436623232313233663639303933393434333931326333
          62613735393333663164633534396636616339323431333437343334386239386135383962333836
          64653438353761346466666534383737643137313132333131616431326363646430303839343132
          64376633653236336236303462393264376630393937323461396265333136346665363539653461
          34336433313164393835396139613061303833633536626234383435396131643265643532383635
          66386463623936613661376566666334316136303938323563316135363934376164633137633863
          30623136373839623530313035366131366134373161323061333335323336336462396638306139
          36653433363037386166386431376264396438313036323366346663396239326136376263313638
          61353632393533636239353661303235666535313934303632646539643732333864396339323766
          36316134613530336330376137346561373538383738646133313138383562626166323761366264
          61663837646233613530333333363463373031633965333539353866356366616563373536643138
          66626162336133383031663835613062373235663837383532643539666165663037613738303339
          61383937386164383035633334373934346437626430656363353631306439373430393562666237
          39303037316535356431663538623132386534653231306662343631623436643336313433333836
          31613431353437313965656438376636386339363162383535646563343539376261633166653364
          36376463383665623264396165323566633334356633323431383933363738353936313764653266
          63616537663665646263323434356264336238653464306164346562376134383239613662666434
          36656331616134323661356135356639643931626565366665656362663638626533633630643366
          63346139363661316164643334623561313333306138356532313566666134393835393938613735
          62666466386532323462366333336563336463666232363832616539623834663030316532333561
          30666132623035303239633731633063313136366266336662376463613737633835363137616661
          66333138336133346430613962376539633339383637623661383434386336636663666164663935
          37323334376261356538356237333139383131313131646365373035656534306262643461306561
          30343939356334643163663735313066306530623466653562396239373938626662383836383162
          34616334316132396464613365376464643139393235356362336665393237643238663463396235
          33343738646537623434303736383066366362623333646532653532393566323032
      username:
        type: string
        description: Username of Salesforce user to authenticate as on the Dev Hub org; must have permission to create scratch orgs
        required: false
        default: admin@wtax.prod
      texei-installation-keys-encrypted:
        type: string
        description: 'Parameter to be passed as the value of the `--installationkeys` option of the `texei:package:dependencies:install` command. It should contain the installation keys of password-protected packages in the order in which they appear in sfdx-project.json, e.g. "1:MyPackage1Key 2: 3:MyPackage3Key". See https://github.com/texei/texei-sfdx-plugin for more information. (This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!). DEPRECATED: add installation keys to sfdx-project.json instead.'
        required: false
    secrets:
      ansible-vault-password:
        description: Password to be used to decrypt the `jwt-key-encrypted` and `texei-installation-keys`.
        required: true
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: check out code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install -y jq

      - name: install ccrypt
        run: sudo apt-get install -y ccrypt

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: write encrypted JWT key to file
        run: echo '${{ inputs.jwt-key-encrypted }}' >.jwt-key

      - name: write Ansible Vault password to file
        run: echo "${{ secrets.ansible-vault-password }}" >.vault-password

      - name: decrypt the private key for the Continuous Integration connected app
        run: ansible-vault decrypt --vault-password-file=.vault-password .jwt-key

      - name: install Salesforce CLI
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: create unsigned plugin allowlist
        run: |
          mkdir -p $HOME/.config/sf
          echo '[ "@dxatscale/sfpowerscripts", "texei-sfdx-plugin" ]' > $HOME/.config/sf/unsignedPluginAllowList.json

      - name: install sfpowerscripts plugin
        run: sf plugins install @dxatscale/sfpowerscripts

      - name: install texei plugin
        run: sf plugins install texei-sfdx-plugin

      - name: connect to Dev Hub
        run: |
          sf auth jwt grant \
              --client-id="${{ inputs.client-id }}" \
              --jwt-key-file=.jwt-key \
              --instance-url="${{ inputs.instance-url }}" \
              --username="${{ inputs.username }}" \
              --set-default-dev-hub \
              --alias dev-hub

      - name: fetch scratch org from pool
        run: sf pool fetch -t "${{ inputs.scratch-org-pool-name }}" -v dev-hub -a scratch-org
        if: ${{ inputs.scratch-org-pool-name != '' }}

      - name: create scratch org
        run: sf org create scratch -w 15 -f config/project-scratch-def.json -d -y 1 --set-default --alias scratch-org
        if: ${{ inputs.scratch-org-pool-name == '' }}

      - name: write encrypted installation keys to file
        run: echo '${{ inputs.texei-installation-keys-encrypted }}' >texei-installation-keys.txt
        if: ${{ inputs.texei-installation-keys-encrypted != '' }}

      - name: tell GitHub Actions to mask the installation keys in the log
        run: echo "::add-mask::$(ansible-vault decrypt --vault-password-file=.vault-password --output - texei-installation-keys.txt)"
        if: ${{ inputs.texei-installation-keys-encrypted != '' }}

      - name: decrypt the installation keys
        run: echo "texei_installation_keys_decrypted="$(ansible-vault decrypt --vault-password-file=.vault-password --output - texei-installation-keys.txt) >>$GITHUB_ENV
        if: ${{ inputs.texei-installation-keys-encrypted != '' }}

      - name: create installation key string from packageInstallationKeys section in sfdx-project.json
        id: installationkeys
        run: |
          echo -n "installationkeys=">$GITHUB_OUTPUT
          cat sfdx-project.json | jq -r '.packageInstallationKeys|to_entries[]|[.key,.value]|@tsv'| \
          while read line; do
            eval `echo "$line"|awk '{print "package="$1" encrypted_key="$2}'`
            eval `echo $encrypted_key|awk -F: '{print "encryption_method="$1" encrypted_key="$2}'`
            case $encryption_method in
              ccrypt)
                installation_key=`echo "$encrypted_key" | base64 --decode | ccat -k .vault-password`
                ;;
              plain)
                installation_key="$encrypted_key"
                ;;
              *)
                if [ "x$encrypted_key" == "x" ]; then
                  # No encrypted key means there was no colon so key was plain text and encryption_method is actually the installation key
                  installation_key="$encryption_method"
                else
                  echo "Unsupported encryption method '$encryption_method' for package $package"
                  exit 3
                fi
                ;;
            esac
            echo -n "$package:$installation_key "
          done >>$GITHUB_OUTPUT

      - name: install dependencies using sfpowerscripts
        run: sf dependency install -u scratch-org -v dev-hub --installationkeys "${{ steps.installationkeys.outputs.installationkeys }}"
        if: ${{ inputs.texei-installation-keys-encrypted == ''}}

      - name: install dependencies (with installation keys)
        run: sf texei package dependencies install -w 15 -r --installationkeys="${texei_installation_keys_decrypted}"
        if: ${{ inputs.texei-installation-keys-encrypted != '' }}

      - name: run scripts
        run: test -d scripts/build-hooks/pre-test && for file in scripts/build-hooks/pre-test/*.apex; do sfdx apex run -f "$file"; done || echo "No pre-test scripts to run."

      - name: determine which Apex classes and triggers are marked for deletion (have a "//DELETE" line)
        run: |
          mkdir target
          grep -r '^\/\/ *DELETE$' "${{ inputs.source-directory }}"|awk -F':' '{print $1}'|while read line; do
            echo -n $line
            filename=`basename $line`
            ext=${filename##*.}
            if [ "${ext}" == "cls" ]; then
              apexClass=`basename $filename .cls`
              echo ',ApexClass,'$apexClass
            elif [ "${ext}" == "trigger" ]; then
              apexTrigger=`basename $filename .trigger`
              echo ',ApexTrigger,'$apexTrigger
            fi
          done >target/deletes.csv
          echo "`wc -l <target/deletes.csv` component(s) marked for deletion"

      - name: delete metadata marked as //DELETE
        run: |
          echo "Removing Apex classes and triggers marked as deleted from source directory..."
          awk -F, '{print "path=\""$1"\" fullName=\""$3"\""}' target/deletes.csv|while read line; do
            eval $line
            echo Deleting $fullName
            # Remove files
            rm $path $path-meta.xml
          done

      - name: push sources to scratch org and run tests for source-directory
        run: |
          set -o pipefail
          jq -r '.packageDirectories[].path' < sfdx-project.json | \
          while read path; do
            if [ $(find ${path} -name '*-meta.xml'|wc -l) -eq 0 ]; then
              echo Skipping empty package directory ${path}
            else
              if [ "${path}" == "${{ inputs.source-directory }}" -a "${{ inputs.run-tests }}" == "yes" ]; then
                testflags=""
                if [ -d "${path}/test" ]; then
                  testflags=$(find ${path}/test -name '*.cls' | while read test; do
                    if ! grep -c '^\/\/ *DELETE$' "${test}" >/dev/null; then
                      echo -n "--tests=`basename ${test} .cls` "
                    fi
                  done)
                else
                  echo "No test classes found in ${path}/test."
                fi
                sf project deploy start --source-dir $path --ignore-conflicts --test-level=RunSpecifiedTests ${testflags}
              else
                sf project deploy start --source-dir $path --ignore-conflicts
              fi
            fi
          done

      - name: package the source as metadata
        run: |
          mkdir -p "target/${{ github.event.repository.name }}-${{ github.sha }}"
          sf project convert source --source-dir "${{ inputs.source-directory }}" --output-dir="target/${{ github.event.repository.name }}-${{ github.sha }}"

      - name: archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ github.sha }}
          path: target/${{ github.event.repository.name }}-${{ github.sha }}

      - name: delete scratch org
        run: sf org delete scratch -p
        if: always()
