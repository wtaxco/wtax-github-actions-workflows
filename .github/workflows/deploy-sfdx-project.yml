on:
  workflow_call:
    inputs:
      source-directory:
        type: string
        description: Directory containing the main source of the project. Usually force-app, but can be something else. This is used to determine which entry in packageDirectories in sfdx-project.json is the main one. Defaults to force-app.
        required: false
        default: force-app
      sonar-url:
        type: string
        description: URL of the Sonar server to use for analyzing the code. If omitted, no Sonar analysis will be run.
        required: false
      sonar-login-encrypted:
        type: string
        description: Ansible Vault-encrypted access token or username:password combination for the Sonar server specified in the `sonar-url` input. (This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: false
        default: |
          $ANSIBLE_VAULT;1.1;AES256
          32383833326465363461613034373735353061326462373665653330313132316435373132333230
          3039643535343833333336306339376265363837383233370a313866313130373936396565643862
          66383061666138303463306435303236646137623634396662646232343837353731636665633961
          3465333431326532360a373035396232353032353236313165376138343463343539636632373139
          33393861363331373862366339663363353436623765316164303932303666626635336632633065
          3539363134663136646165386566353962326664643833353464
      sonar-quality-gate:
        type: boolean
        description: Whether to poll the SonarQube instance until the quality gate status is available and fail the build if the quality gate fails.
        required: false
        default: false
      instance-url:
        type: string
        description: Salesforce instance URL of the target org
        required: true
      client-id:
        type: string
        description: OAuth client ID (sometimes called consumer key) of the connected app on Salesforce used to connect to the target org
        required: true
      jwt-key-encrypted:
        type: string
        description: Ansible Vault-encrypted private key to connect to the target org with using the JWT flow. (This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: true
      username:
        type: string
        description: Username of Salesforce user to authenticate as on the target org
        required: true
      run-tests:
        type: boolean
        description: Whether to run tests as part of the deployment. This is required when deploying to a production org.
        required: true
      docker-username:
        type: string
        description: Username to use to connect to the docker registry docker.wtax.co that contains the wtax/pmd image used for static code analysis
        required: false
        default: github
      docker-password-encrypted:
        type: string
        description: Ansible Vault-encrypted password matching the `docker-username` used to log in to the Docker registry docker.wtax.co. This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!
        required: false
        default: |
          $ANSIBLE_VAULT;1.1;AES256
          63353733303166336136366435326436353731376636366631396239656432326433393265663965
          3736366139386466646534633963346133396333376333380a343032326335623566626263623062
          66646433313964633930383465626633666636633937303839306266346562316230643965373633
          6365326631316564640a626466666634333235656163333334373538663534323862303733353664
          63626230363462643364393731616137393231653866363230636238393266363430
    secrets:
      ansible-vault-password:
        description: Password to be used to decrypt the `jwt-key-encrypted`.
        required: true
jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: print out inputs (for debugging purposes)
        run: |
          echo 'inputs.instance-url = ${{ inputs.instance-url }}' 
          echo 'inputs.client-id = ${{ inputs.client-id }}' 
          echo 'inputs.jwt-key-encrypted = ${{ inputs.jwt-key-encrypted }}' 
          echo 'inputs.username = ${{ inputs.username }}' 
          echo 'inputs.run-tests = ${{ inputs.run-tests }}'
  build:
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install -y jq

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: install Salesforce CLI (sfdx)
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: package the source as metadata
        run: |
          mkdir -p "target/${{ github.event.repository.name }}-${{ github.sha }}"
          sf project convert source --source-dir "${{ inputs.source-directory }}" --output-dir="target/${{ github.event.repository.name }}-${{ github.sha }}"

      - name: determine which Apex classes and triggers are marked for deletion (have a "//DELETE" line)
        run: |
          metadata_directory="target/${{ github.event.repository.name }}-${{ github.sha }}"
          grep -r '^\/\/ *DELETE$' "${metadata_directory}"|awk -F':' '{print $1}'|while read line; do
            echo -n $line
            filename=`basename $line`
            ext=${filename##*.}
            if [ "${ext}" == "cls" ]; then
              apexClass=`basename $filename .cls`
              echo ',ApexClass,'$apexClass
            elif [ "${ext}" == "trigger" ]; then
              apexTrigger=`basename $filename .trigger`
              echo ',ApexTrigger,'$apexTrigger
            fi
          done >target/deletes.csv
          echo "`wc -l <target/deletes.csv` component(s) marked for deletion"

      - name: remove Apex classes and triggers marked as deleted from metadata
        run: |
          metadata_directory="target/${{ github.event.repository.name }}-${{ github.sha }}"
          echo "Removing Apex classes and triggers marked as deleted from metadata directory..."
          awk -F, '{print "path=\""$1"\" fullName=\""$3"\""}' target/deletes.csv|while read line; do
            eval $line
            # Remove files
            rm $path $path-meta.xml
            # Remove from package manifest
            sed -i.bak "/<members>${fullName}<\\/members>/d" ${metadata_directory}/package.xml
          done
          rm -f ${metadata_directory}/package.xml.bak
          echo "`wc -l <target/deletes.csv` Apex class(es) and trigger(s) removed from metadata directory."

      - name: zip metadata directory
        run: |
          rm -f "${{ github.event.repository.name }}-${{ github.sha }}.zip" 
          zip -r "${{ github.event.repository.name }}-${{ github.sha }}.zip" "${{ github.event.repository.name }}-${{ github.sha }}" >/dev/null
        working-directory: target

      - name: archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            target/${{ github.event.repository.name }}-${{ github.sha }}.zip
            target/deletes.csv

  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install -y jq

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: install Salesforce CLI
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: create unsigned plugin allowlist
        run: |
          mkdir -p $HOME/.config/sf
          echo '[ "@dxatscale/sfpowerscripts", "apex-code-coverage-transformer" ]' > $HOME/.config/sf/unsignedPluginAllowList.json

      - name: download metadata ZIP file
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: target

      - name: write Ansible Vault password to file
        run: echo "${{ secrets.ansible-vault-password }}" >.vault-password

      - name: write encrypted JWT key to file
        run: echo '${{ inputs.jwt-key-encrypted }}' >.jwt-key

      - name: decrypt the private key for the Continuous Integration connected app
        run: ansible-vault decrypt --vault-password-file=.vault-password .jwt-key

      - name: connect to org
        run: |
          sf auth jwt grant \
              --client-id="${{ inputs.client-id }}" \
              --jwt-key-file=.jwt-key \
              --instance-url=${{ inputs.instance-url }} \
              --username=${{ inputs.username }} \
              --set-default

      - name: create destructive change manifest for Apex classes/triggers marked with //DELETE
        run: |
          echo Creating destructive change manifest for Apex classes/triggers marked with //DELETE
          # Set some variables
          target_org="${{ inputs.username }}"
          source_directory="${{ inputs.source-directory }}"
          zipfile_absolute="$(cd "$(dirname "target/${{ github.event.repository.name }}-${{ github.sha }}.zip")"; pwd -P)/$(basename "target/${{ github.event.repository.name }}-${{ github.sha }}.zip")"
          
          # Get list of Apex classes and triggers on org
          echo - Getting list of Apex classes and triggers on org
          >target/org-apex.txt
          sf data query -t -o ${target_org} -q 'SELECT Name FROM ApexClass' --json|jq -r '.result.records[].Name' >>target/org-apex.txt
          sf data query -t -o ${target_org} -q 'SELECT Name FROM ApexTrigger' --json|jq -r '.result.records[].Name' >>target/org-apex.txt

          # Move Apex classes and triggers that still exist on org to delete/source
          echo - Filtering components that still exist on org
          rm -rf delete/source
          >target/scheduled-for-destruction.txt
          >target/already-destroyed.txt
          >target/cannot-destroy.txt
          awk -F, '{print "path=\""$1"\" type=\""$2"\" fullName=\""$3"\""}' target/deletes.csv|while read line; do
            eval $line
            if grep "^${fullName}\$" target/org-apex.txt; then
              echo "    Scheduling ${type}:${fullName} for destruction"
              if [ "$type" == "ApexClass" ]; then
                echo $path-meta.xml >>target/scheduled-for-destruction.txt
                mkdir -p delete/source/classes/classes
                mv $path $path-meta.xml delete/source/classes/classes
              elif [ "$type" == "ApexTrigger" ]; then
                echo $path-meta.xml >>target/scheduled-for-destruction.txt
                mkdir -p delete/source/classes/triggers
                mv $path $path-meta.xml delete/source/triggers
              else
                echo $path-meta.xml >>target/cannot-destroy.txt
                echo "    WARNING: Support for deleting components of metadata type ${type} not implemented yet (${type}:${fullName})."
              fi
            else
              echo $path-meta.xml >>target/already-destroyed.txt
            fi
          done
          
          scheduled_for_destruction=$(wc -l <target/scheduled-for-destruction.txt)
          already_destroyed=$(wc -l <target/already-destroyed.txt)
          cannot_destroy=$(wc -l <target/cannot-destroy.txt)
          # Directory delete/source was only created in the previous section if at least one component is to be deleted
          echo "${scheduled_for_destruction} component(s) to be deleted from org, ${already_destroyed} already deleted (cannot delete ${cannot_destroy})."
          if [ -d delete/source ]; then
            echo "- Generating destructive change manifest..."
            mkdir -p delete/package
            sf project convert source --root-dir=delete/source --output-dir=delete/package
            # Rename package.xml to destructiveChangesPre.xml
            mv delete/package/package.xml delete/package/destructiveChangesPre.xml
            # Add the destructiveChangesPre.xml to the zipfile
            # It will be deployed later
            echo "- Adding destructive change manifest to metadata package..."
            zip -r "${zipfile_absolute}" -j delete/package/destructiveChangesPre.xml
            echo "Ok! Added ${scheduled_for_destruction} destructive changes to ${zipfile_absolute}."
          else
            echo "No destructive changes to add."
          fi
          echo
          
      - name: deploy to org and run Apex tests
        run: |
          echo "Finding unit tests in project..."
          testflags=$(find ${{ inputs.source-directory }}/test -name '*.cls' | while read test; do
            if ! grep -c '^\/\/ *DELETE$' "${test}" >/dev/null; then
              echo -n "--tests=`basename ${test} .cls` "
            fi
          done)          
          echo "Deploying to ${{ inputs.username }}..."
          sf project deploy start --target-org="${{ inputs.username }}" --test-level=RunSpecifiedTests ${testflags}--coverage-formatters=json --results-dir=reports --metadata-dir="target/${{ github.event.repository.name }}-${{ github.sha }}.zip" --wait=180

      - name: install apex-code-coverage-transformer plugin
        run: sf plugins install apex-code-coverage-transformer
        if: inputs.sonar-url != ''

      - name: convert test coverage report to Sonarqube format
        run: sf apex-code-coverage transformer transform -j reports/coverage/coverage.json -x reports/coverage/coverage.xml
        if: inputs.sonar-url != ''

      - name: write encrypted Docker registry password to file
        run: echo '${{ inputs.docker-password-encrypted }}' >.docker-password
        if: inputs.sonar-url != ''

      - name: decrypt the Docker registry password
        run: |
          ansible-vault decrypt --vault-password-file=.vault-password .docker-password >>$GITHUB_ENV
        if: inputs.sonar-url != ''

      - name: log in to the docker.wtax.co Docker registry
        run: docker login -u ${{ inputs.docker-username }} --password-stdin docker.wtax.co <.docker-password
        if: inputs.sonar-url != ''

      - name: retrieve Apex ruleset
        run: curl --output apex-ruleset.xml https://raw.githubusercontent.com/wtaxco/wtax-github-actions-workflows/testing/assets/pmd/apex-ruleset.xml
        if: inputs.sonar-url != ''

      - name: run PMD static code analysis for Apex code
        run: >
            docker run 
            --rm 
            -v .:/usr/src 
            docker.wtax.co/wtax/pmd:7.1.0 
            check 
            --rulesets=/usr/src/apex-ruleset.xml 
            --dir=/usr/src 
            --report-file=/usr/src/reports/pmd.xml 
            --format=xml
            --no-fail-on-violation
        if: inputs.sonar-url != ''

      - name: write encrypted sonar token to file
        run: echo '${{ inputs.sonar-login-encrypted }}' >.sonar-login
        if: inputs.sonar-url != ''

      - name: tell GitHub Actions to mask the sonar token in the log
        run: echo "::add-mask::$(ansible-vault decrypt --vault-password-file=.vault-password --output - .sonar-login)"
        if: inputs.sonar-url != ''

      - name: decrypt the sonar token
        run: |
          echo -n "sonar_login_decrypted=">$GITHUB_ENV
          ansible-vault decrypt --vault-password-file=.vault-password --output - .sonar-login >>$GITHUB_ENV
        if: inputs.sonar-url != ''

      - name: send test coverage results to Sonar
        run: >
            docker run --rm 
            -e SONAR_HOST_URL="${{ inputs.sonar-url }}" 
            -e SONAR_LOGIN="${sonar_login_decrypted}" 
            -v ".:/usr/src" 
            sonarsource/sonar-scanner-cli:5 
            -Dsonar.projectKey=${GITHUB_REPOSITORY#*/} 
            -Dsonar.javascript.file.suffixes=.cls 
            -Dsonar.sources=${{ inputs.source-directory }}/main 
            -Dsonar.tests=${{ inputs.source-directory }}/test 
            -Dsonar.coverageReportPaths=reports/coverage/coverage.xml 
            -Dsonar.java.pmd.reportPaths=reports/pmd.xml
            -Dsonar.qualitygate.wait=${{ inputs.sonar-quality-gate == true }}
        if: inputs.sonar-url != ''
