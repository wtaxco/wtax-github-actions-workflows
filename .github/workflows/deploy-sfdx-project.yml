on:
  workflow_call:
    inputs:
      source-directory:
        type: string
        description: Directory containing the main source of the project. Usually force-app, but can be something else. This is used to determine which entry in packageDirectories in sfdx-project.json is the main one. Defaults to force-app.
        required: false
        default: force-app
      sonar-url:
        type: string
        description: URL of the Sonar server to use for analyzing the code. If omitted, no Sonar analysis will be run.
        required: false
      sonar-login-encrypted:
        type: string
        description: Ansible Vault-encrypted access token or username:password combination for the Sonar server specified in the `sonar-url` input. (This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: false
        default: |
          $ANSIBLE_VAULT;1.1;AES256
          35373231663562616534663832633766396430663063373663613231326435343631313737353738
          3563393534376530636236323337663339663136313130320a383536353139346132636638306162
          63663361333862396166333338636436306332656165643861633737303130306561656131613837
          3264663737393461610a653532633366626361383235616666343135393466643161616463376338
          62643432326530666566386435366164343362336666326436653038616233343561353235343830
          3032633238343139323938363761613439323931626636643838
      instance-url:
        type: string
        description: Salesforce instance URL of the target org
        required: true
      client-id:
        type: string
        description: OAuth client ID (sometimes called consumer key) of the connected app on Salesforce used to connect to the target org
        required: true
      jwt-key-encrypted:
        type: string
        description: Ansible Vault-encrypted private key to connect to the target org with using the JWT flow. (This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: true
      username:
        type: string
        description: Username of Salesforce user to authenticate as on the target org
        required: true
      run-tests:
        type: boolean
        description: Whether to run tests as part of the deployment. This is required when deploying to a production org.
        required: true
    secrets:
      ansible-vault-password:
        description: Password to be used to decrypt the `jwt-key-encrypted`.
        required: true
jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: print out inputs (for debugging purposes)
        run: |
          echo 'inputs.instance-url = ${{ inputs.instance-url }}' 
          echo 'inputs.client-id = ${{ inputs.client-id }}' 
          echo 'inputs.jwt-key-encrypted = ${{ inputs.jwt-key-encrypted }}' 
          echo 'inputs.username = ${{ inputs.username }}' 
          echo 'inputs.run-tests = ${{ inputs.run-tests }}'
  build:
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v2

      - name: install jq
        run: sudo apt-get install -y jq

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: install Salesforce CLI (sfdx)
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: package the source as metadata
        run: |
          mkdir -p "target/${{ github.event.repository.name }}-${{ github.sha }}"
          sf project convert source --source-dir "${{ inputs.source-directory }}" --output-dir="target/${{ github.event.repository.name }}-${{ github.sha }}"

      - name: remove Apex classes and triggers marked as deleted from metadata
        run: |
          # Determine which Apex classes are marked for deletion (have a "//DELETE" line)
          echo "Removing Apex classes and triggers marked as deleted from metadata directory..."
          metadata_directory="target/${{ github.event.repository.name }}-${{ github.sha }}"
          members="$(grep -r '^\/\/ *DELETE$' "${metadata_directory}"|awk -F':' '{print $1}'|while read line; do
            filename=`basename $line`
            ext=${filename##*.}
            sep=
            if [ "${ext}" == "cls" ]; then
              apexClass=`basename $filename .cls`
              echo "    <members>${apexClass}</members>"
              rm -f $line $line-meta.xml
              sed -i.bak "/<members>${apexClass}<\\/members>/d" ${metadata_directory}/package.xml
            elif [ "${ext}" == "trigger" ]; then
              apexTrigger=`basename $filename .trigger`
              echo "    <members>${apexClass}</members>"
              rm -f $line $line-meta.xml
              sed -i.bak "/<members>${apexClass}<\\/members>/d" ${metadata_directory}/package.xml
            fi
          done)"
          rm -f ${metadata_directory}/package.xml.bak
          files_to_delete=`echo "${members}"|grep -c '<members>' || echo`
          echo "${files_to_delete} Apex classes(s) and trigger(s) removed from metadata directory."

      - name: zip metadata directory
        run: |
          pushd "target" >/dev/null
          rm -f "${{ github.event.repository.name }}-${{ github.sha }}.zip" 
          zip -r "${{ github.event.repository.name }}-${{ github.sha }}.zip" "${{ github.event.repository.name }}-${{ github.sha }}" >/dev/null
          popd >/dev/null

      - name: archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: target/${{ github.event.repository.name }}-${{ github.sha }}.zip

  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v2

      - name: install jq
        run: sudo apt-get install -y jq

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: install Salesforce CLI
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: create unsigned plugin allowlist
        run: |
          mkdir -p $HOME/.config/sf
          echo '[ "@dxatscale/sfpowerscripts", "apex-code-coverage-transformer" ]' > $HOME/.config/sf/unsignedPluginAllowList.json

      - name: download metadata ZIP file
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: target

      - name: write Ansible Vault password to file
        run: echo "${{ secrets.ansible-vault-password }}" >.vault-password

      - name: write encrypted JWT key to file
        run: echo '${{ inputs.jwt-key-encrypted }}' >.jwt-key

      - name: decrypt the private key for the Continuous Integration connected app
        run: ansible-vault decrypt --vault-password-file=.vault-password .jwt-key

      - name: connect to org
        run: |
          sf auth jwt grant \
              --client-id="${{ inputs.client-id }}" \
              --jwt-key-file=.jwt-key \
              --instance-url=${{ inputs.instance-url }} \
              --username=${{ inputs.username }} \
              --set-default

      - name: create destructive change manifest for Apex classes/triggers marked with //DELETE
        run: |
          # Determine which Apex classes are marked for deletion (have a "//DELETE" line)
          components="$(sep=; grep -r '^\/\/ *DELETE$' force-app|awk -F':' '{print $1}'|while read line; do
            filename=`basename $line`
            ext=${filename##*.}
            if [ "${ext}" == "cls" ]; then
            echo -n "${sep}ApexClass:`basename $filename .cls`"
            sep=,
            fi
          done)"
          if [ "x${components}" != "x" ]; then
            # Create a destructiveChangesPre.xml and add it to the metadata zipfile
            zipfile_absolute="$(cd "$(dirname "target/${{ github.event.repository.name }}-${{ github.sha }}.zip")"; pwd -P)/$(basename "target/${{ github.event.repository.name }}-${{ github.sha }}.zip")"
            echo "- Adding destructive changes to metadata package..."
            
            # Retrieve the Apex classes from the org to see which ones actually exist there, as attempting a delete
            # on an Apex class that doesn't exist fails the deployment
            rm -rf delete && mkdir -p delete
            pushd delete >/dev/null
            cat <<EOF >sfdx-project.json
            {
              "packageDirectories": [
                {
                  "path": "force-app"
                }
              ]
            }
          EOF
            mkdir force-app
            # force:source:retrieve requires an explicit -u orgname
            sfdx force:source:retrieve -u "${{ inputs.username }}" -m "${components}" --json
            # Check if anything was retrieved. If not, everything is already deleted and we can skip destructive changes
            number_of_files=`find force-app |wc -l`
            number_of_files=$(( number_of_files - 1))
            if [ ${number_of_files} -gt 0 ]; then
              # Convert to metadata format so we have a package.xml
              mkdir -p "${project_name}"
              sfdx force:source:convert -d "${project_name}" -r force-app --json
              # Rename package.xml to destructiveChangesPre.xml
              files_to_delete=`grep -c '<members>' "${project_name}/package.xml"`
              mv "${project_name}/package.xml" "${project_name}/destructiveChangesPre.xml"
              # Add the destructiveChangesPre.xml to the zipfile
              # It will be deployed later
              zip -r "${zipfile_absolute}" "${project_name}/destructiveChangesPre.xml"
              echo "Ok! Added ${files_to_delete} destructive changes to ${zipfile_absolute}."
            else
              echo "No destructive changes to add."
            fi
            popd >/dev/null
          fi
          echo
          
      - name: deploy to org and run Apex tests
        run: |
          echo "Finding unit tests in project..."
          testflags=$(find force-app/test -name '*.cls' | while read test; do
            if ! grep -c '^\/\/ *DELETE$' "${test}" >/dev/null; then
              echo -n "--tests=`basename ${test} .cls` "
            fi
          done)          
          echo "Deploying to ${{ inputs.username }}..."
          sf project deploy start --target-org="${{ inputs.username }}" --test-level=RunSpecifiedTests ${testflags}--coverage-formatters=json --results-dir=reports --metadata-dir="target/${{ github.event.repository.name }}-${{ github.sha }}.zip" --wait=60

      - name: install apex-code-coverage-transformer plugin
        run: sf plugins install apex-code-coverage-transformer

      - name: convert test coverage report to Sonarqube format
        run: sf apex-code-coverage transformer transform -j reports/coverage/coverage.json -x reports/coverage/coverage.xml

      - name: write encrypted sonar token to file
        run: echo '${{ inputs.sonar-login-encrypted }}' >.sonar-login

      - name: decrypt the sonar token
        run: |
          echo -n "sonar_login_decrypted=">$GITHUB_ENV
          ansible-vault decrypt --vault-password-file=.vault-password --output - .sonar-login >>$GITHUB_ENV

      - name: tell GitHub Actions to mask the sonar token in the log
        run: echo "::add-mask::${sonar_login_decrypted}"

      - name: send test coverage results to Sonar
        run: docker run --rm -e SONAR_HOST_URL="${{ inputs.sonar-url }}" -e SONAR_LOGIN="${sonar_login_decrypted}" -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=${GITHUB_REPOSITORY#*/} -Dsonar.javascript.file.suffixes=.cls -Dsonar.sources=${{ inputs.source-directory }}/main -Dsonar.tests=${{ inputs.source-directory }}/test -Dsonar.coverageReportPaths=reports/coverage/coverage.xml
        if: inputs.sonar-url != ''
