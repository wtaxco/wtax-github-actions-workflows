on:
  workflow_call:
    inputs:
      source-directory:
        type: string
        description: Directory containing the main source of the project. Usually force-app, but can be something else. This is used to determine which entry in packageDirectories in sfdx-project.json is the main one. Defaults to force-app.
        required: false
        default: force-app
      sonar-url:
        type: string
        description: URL of the Sonar server to use for analyzing the code. If omitted, the WTax Sonar server at sonar.wtax.co will be used. The `sonar-login` secret should hold a valid access token or username:password combination for this server.
        required: false
        default: https://sonar.wtax.co
      sonar-login-encrypted:
        type: string
        description: Ansible Vault-encrypted access token or username:password combination for the Sonar server specified in the `sonar-url` input. (This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: false
        default: |
          $ANSIBLE_VAULT;1.1;AES256
          32383833326465363461613034373735353061326462373665653330313132316435373132333230
          3039643535343833333336306339376265363837383233370a313866313130373936396565643862
          66383061666138303463306435303236646137623634396662646232343837353731636665633961
          3465333431326532360a373035396232353032353236313165376138343463343539636632373139
          33393861363331373862366339663363353436623765316164303932303666626635336632633065
          3539363134663136646165386566353962326664643833353464
      sonar-quality-gate:
        type: boolean
        description: Whether to poll the SonarQube instance until the quality gate status is available and fail the build if the quality gate fails.
        required: false
        default: false
      installation-key-encrypted:
        type: string
        description: Ansible Vault-encrypted installation key to protect the package version with (this should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: false
        default: |
            $ANSIBLE_VAULT;1.1;AES256
            34396439636233376162626134303731343263616433666433646366363835613332663235613638
            3336366330616437356539653733393735323338336461360a333837326133653231373531363161
            62313437626230323039313033636533303636613036663030316462666638366233363832613638
            6566386233623363300a343538386131373737616539333666343263323932356637396336386635
            3136
      promote:
        type: boolean
        description: Whether to promote the package version to released after creating it.
        required: false
        default: false
      instance-url:
        type: string
        description: Salesforce instance URL to log in to as Dev Hub org
        required: false
        default: https://wtax.my.salesforce.com
      client-id:
        type: string
        description: OAuth client ID (sometimes called consumer key) of the connected app on Salesforce used to connect to the Dev Hub org
        required: false
        default: 3H7cm0QedwevwtVKpSJ4PXeI7kvPanBgB3qK0sBU06E5MSMka3xqeg9JETRkx8Z8PQxuZkUvlMJH10MQ8A9uw
      jwt-key-encrypted:
        type: string
        description: Ansible Vault-encrypted private key to connect to the Dev Hub org with using the JWT flow. This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!
        required: false
        default: |
          $ANSIBLE_VAULT;1.1;AES256
          36366266633466333062353737373533353663353639356239353337383566636139366165656164
          6366356464393562303262303365663530316261333861640a333034356636323964303265646538
          62373230316666383936643662393833316165396632303536666235363563343337373730666363
          6434326536306664650a616432386135393437363165313830313635666566643836313738376534
          36633062663763653464383732623633306463613562633431373962316163336564303033373461
          61303836353333323864613538633566636231333231633537663465343566666231316565336362
          34373066373261613135656461633135643533653665333531376630336266373438343635646237
          64343166356236363537383435396234343161316631396637653431623630393665353233353566
          30343165376166386637376265363864326265373739656561613137653161643734626166393137
          62646264613366373337353037306237386466643032656366343934666537313939353038636165
          38643333356565333961313064623331396563646431323862373736623665333162663832373562
          33356465396263653264373166343533373866636332396431363763623930626537646261396564
          62303061643462363632633934623831623733623264386138643033363931376665346264393361
          65343030663264366534383835633033383237663066646338316162613961643662393665353136
          61373962366630363366646530326238656339333838663531383332303562656364306165333237
          64613966366438333366336663363733373033653833633736303366363535613865303238623034
          63396566616533643034363436383563366438373965646365376538656161626361633337303963
          36333563383238363266313131376165653638633766613838396530353666623538613262383138
          31376463316132373435373164343930333631386530343731636534653562376537306535313665
          63346564363563386530633865393063316266626361323262616536633133306132316332386535
          64343037393363396635376335393131316563386363633032366264623332663230613131643464
          63656566363132643463393231343535333333653831626363363463663133313437396638393961
          39303336353766623038626431303730633734363831663165373334626635396633323837313763
          38663965323136313433636434303464633364666632386666326330326230303731626436323563
          30316434626263353737376361386331656365313663663264393130313265646633383732663534
          33643730346561643630376430303238636333623532343633396662653062393232643836383762
          65363336616263666539346565656336363231326564326437633836616339303836346331326230
          37356365333330633238356466656131376136633234303963383266653265656636393965396333
          39323736356432656639393735323865656636363435316633343239666636393534396639353339
          39613231663665313665303737666231643333393361363766383666396166343437326539333838
          66303234363264303537663765376464366433313432376330333764623136333630313536373031
          32333239626233303461616365303338303838643866353038343635396330636430396666613164
          32303163383662363661613537633235333334363435646338333835346533633635323264373136
          38353934353234373530383734333732323663393261386130376637616131623162373065313466
          31623635653131346638633336376563383737313361373839346563356335343737343963626134
          31386264356639643861393761376137383164363433383539353032643365626430353536383231
          63653634313631656433383835326331396666623361613934356536343165643436313731323930
          34333530633839396630356131303931656330353834353638333237643737353561313935386164
          62396466383434383037353235623065346665363335363338343365653862373234333466663133
          38303166623331303562356363303331363939646361356362353465353331633135356563313230
          39653738303132396664666633323761383262346334363936656561653035643136336534303338
          35383231353833653034653039356531383264663236323164313430323662343739343933303738
          65633262646565636161623934323933656339633437386261613066396162636466633264313133
          34373738396136333434356564346563383734353563373964333164656664616266373362643835
          66663031393736313132353063653730613464666536323035336539643363373439633862316536
          63383539356634326462363233646364313265346433323763303162363735626665613434303933
          65313436303738373666383361633666653733613234346639393761376130643562653465383530
          33613161656461333862373337343139643433613238346365633666383737376565393332313735
          37306463343330386161653138623963383564343862336335316335323536313838316439383831
          34383135313236376264393131653064613834636538323234663636313438366434303562373539
          38316461373762396336343362366265323237336535343764653766356132366635316265656664
          31346462626164346362386632323333333261636364656638626538646239363031383761373766
          33636438666436616534333836663765313533646430323065666538303739306431383635326138
          35663934643938343132656531316332343930383033616661623432313031643231633765393532
          64333564623963323332366533646262613234326361353436666237313161323031646264333361
          63393135633232306138303334383263333433343931366631326537316538393763323032663433
          35303330646339646434653364353565373839656138343939363931653936316635303731323233
          62663535633036326132356632396664653862303539326233616261663830386137643265323937
          37346133663838663862363435663433313035366565646261393438336634643761393262323065
          35663635333531353939363962356263336539316239386465376133326535323532356466303736
          37353961663536353132353065396338636231356432643038333739323866653164326562373638
          35373331343132663863326135316534316336343630333738623133386566353337623036383537
          62363663356530643932376430373539636565343934306562373137336332623162653730386663
          33363764613137633663363334653965613338616533396266313135656331663831353130663266
          61386631353639613038303561343038633035376133656330633436643762366434346164363830
          39646661623336626635313033316361646365346432653233306138303732333533313536343165
          38306430343564626533346436303664303537333661323564626365353934656536333765323736
          63316133646638306135346636386139646538303439386639643130393035396130353030653764
          37346632376661643434306665653332353334386564323935363861373561306539613339646132
          62356232653533373864643739323533346364313136313033306132303631323036636465306630
          62393066313861646262643263653264663037643237613061396437326236343536303965643835
          64323961353537666630396536396265316335656266633762616564313733393235616435316165
          37373238623735633061363362653363616562336434363366366264646232376437623439386666
          32643236626237613262363139333564653433333364316333653164353837303537313235623434
          63356561356434653338633562383466303737376364336338393133383335393337663262333466
          65306562663362643731373130643161383334353234376633333033666233363335333563393961
          38643833306665626436313632343532326638336537303233396335376334353638626338666336
          37643661356561333163643565383334656630626566613035316336323032616566313862646336
          37396465333732626464336364306231653835313338363838393138313135346364663161633739
          34306365643464393931303265646262313638363837643333326134663236646230343630366333
          61393638306363396238666434653137363862356132313134386233646138613264383330396566
          31613731303239656161373834306366393736646436353739303139623431656632323330653261
          62393465303438613434353032303139396162626535326239323463666633356365353934653636
          33353133303439646130383237363735386239303934396637613663343766326164643463363333
          65303363356164313864616132633961363762313934376132303739316133363364613436643665
          63333030633634623439626635663737343137383438336566643137363162333732323533623765
          34363232313235633233613264343839376365316137633361643461353762633333383765356265
          38653161363732663133356435313862643562393063376431636432373437626235393237303333
          38366134633039636464363566663364656434373037653562653131613438616336306664646164
          34643762626532633930643065366539396163326662623565633562343736613466303539633464
          363437316663356130353437616138323830
      username:
        type: string
        description: Username of Salesforce user to authenticate as on the Dev Hub org; must have permission to create scratch orgs
        required: false
        default: admin@wtax.prod
      docker-username:
        type: string
        description: Username to use to connect to the docker registry docker.wtax.co that contains the wtax/pmd image used for static code analysis
        required: false
        default: github
      docker-password-encrypted:
        type: string
        description: Ansible Vault-encrypted password matching the `docker-username` used to log in to the Docker registry docker.wtax.co. This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!
        required: false
        default: |
            $ANSIBLE_VAULT;1.1;AES256
            63353733303166336136366435326436353731376636366631396239656432326433393265663965
            3736366139386466646534633963346133396333376333380a343032326335623566626263623062
            66646433313964633930383465626633666636633937303839306266346562316230643965373633
            6365326631316564640a626466666634333235656163333334373538663534323862303733353664
            63626230363462643364393731616137393231653866363230636238393266363430
    secrets:
      ansible-vault-password:
        description: Password to be used to decrypt the `jwt-key-encrypted`.
        required: true
jobs:
  package:
    runs-on: ubuntu-latest

    steps:
      - name: check out code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install -y jq

      - name: install ccrypt
        run: sudo apt-get install -y ccrypt

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: write Ansible Vault password to file
        run: echo "${{ secrets.ansible-vault-password }}" >.vault-password

      - name: write encrypted JWT key to file
        run: echo '${{ inputs.jwt-key-encrypted }}' >.jwt-key

      - name: decrypt the private key for the Continuous Integration connected app
        run: ansible-vault decrypt --vault-password-file=.vault-password .jwt-key

      - name: install Salesforce CLI
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: create unsigned plugin allowlist
        run: |
          mkdir -p $HOME/.config/sf
          echo '[ "@dxatscale/sfpowerscripts", "apex-code-coverage-transformer" ]' > $HOME/.config/sf/unsignedPluginAllowList.json

      - name: install sfpowerscripts plugin
        run: sf plugins install @dxatscale/sfpowerscripts

      - name: connect to Dev Hub
        run: |
          sf auth jwt grant \
              --client-id="${{ inputs.client-id }}" \
              --jwt-key-file=.jwt-key \
              --instance-url="${{ inputs.instance-url }}" \
              --username="${{ inputs.username }}" \
              --set-default-dev-hub \
              --alias dev-hub

      - name: find package name
        id: package-info
        run: jq -r '"name=" + (.packageDirectories[]|select(.path=="${{ inputs.source-directory }}")|.package)' <sfdx-project.json >>$GITHUB_OUTPUT

      - name: write encrypted installation key to file
        run: echo '${{ inputs.installation-key-encrypted }}' >installation-key.txt

      - name: tell GitHub Actions to mask the installation key in the log
        run: echo "::add-mask::$(ansible-vault decrypt --vault-password-file=.vault-password --output - installation-key.txt)"

      - name: decrypt the installation key
        run: echo "installation_key_decrypted="$(ansible-vault decrypt --vault-password-file=.vault-password --output - installation-key.txt) >>$GITHUB_ENV

      - name: create package version
        id: package-version
        run: |
          set -o pipefail
          sf package version create \
              --package "${{ steps.package-info.outputs.name }}" \
              --tag "Git commit ${{ github.sha }}" \
              --code-coverage \
              --definition-file config/project-scratch-def.json \
              --installation-key "${installation_key_decrypted}" \
              --wait 60 \
              --json | tee output.json
          cat output.json | jq -r '"id=" + .result.SubscriberPackageVersionId' >>$GITHUB_OUTPUT

      - name: create scratch org
        run: sf org create scratch -w 5 -f config/project-scratch-def.json -d -y 1 --alias scratch-org

      - name: create installation key string from packageInstallationKeys section in sfdx-project.json
        id: installationkeys
        run: |
          echo -n "installationkeys=">$GITHUB_OUTPUT
          cat sfdx-project.json | jq -r '.packageInstallationKeys|to_entries[]|[.key,.value]|@tsv'| \
          while read line; do
            eval `echo "$line"|awk '{print "package="$1" encrypted_key="$2}'`
            eval `echo $encrypted_key|awk -F: '{print "encryption_method="$1" encrypted_key="$2}'`
            case $encryption_method in
              ccrypt)
                installation_key=`echo "$encrypted_key" | base64 --decode | ccat -k .vault-password`
                ;;
              plain)
                installation_key="$encrypted_key"
                ;;
              *)
                if [ "x$encrypted_key" == "x" ]; then
                  # No encrypted key means there was no colon so key was plain text and encryption_method is actually the installation key
                  installation_key="$encryption_method"
                else
                  echo "Unsupported encryption method '$encryption_method' for package $package"
                  exit 3
                fi
                ;;
            esac
            echo -n "$package:$installation_key "
          done >>$GITHUB_OUTPUT

      - name: install dependencies
        run: sf dependency install -u scratch-org -v dev-hub --installationkeys "${{ steps.installationkeys.outputs.installationkeys }}"

      - name: install package
        run: sf package install --package "${{ steps.package-version.outputs.id }}" --installation-key "${installation_key_decrypted}" -w 15

      - name: run tests and produce coverage report
        run: sf apex run test --synchronous --code-coverage --result-format=json --output-dir=reports/coverage
        if: inputs.sonar-url != ''

      - name: install apex-code-coverage-transformer plugin
        run: sf plugins install apex-code-coverage-transformer@1.7.6
        if: inputs.sonar-url != ''

      - name: convert test coverage report to Sonarqube format
        run: sf apex-code-coverage transformer transform -j reports/coverage/test-result-codecoverage.json -x reports/coverage/coverage.xml --command=test
        if: inputs.sonar-url != ''

      - name: write encrypted Docker registry password to file
        run: echo '${{ inputs.docker-password-encrypted }}' >.docker-password
        if: inputs.sonar-url != ''

      - name: decrypt the Docker registry password
        run: |
          ansible-vault decrypt --vault-password-file=.vault-password .docker-password >>$GITHUB_ENV
        if: inputs.sonar-url != ''

      - name: log in to the docker.wtax.co Docker registry
        run: docker login -u ${{ inputs.docker-username }} --password-stdin docker.wtax.co <.docker-password
        if: inputs.sonar-url != ''

      - name: retrieve Apex ruleset
        run: curl --output apex-ruleset.xml https://raw.githubusercontent.com/wtaxco/wtax-github-actions-workflows/testing/assets/pmd/apex-ruleset.xml
        if: inputs.sonar-url != ''

      - name: run PMD static code analysis for Apex code
        run: >
            docker run 
            --rm
            -v .:/usr/src 
            docker.wtax.co/wtax/pmd:7.1.0 
            check 
            --rulesets=/usr/src/apex-ruleset.xml 
            --dir=/usr/src 
            --report-file=/usr/src/reports/pmd.xml 
            --format=xml
            --no-fail-on-violation
        if: inputs.sonar-url != ''

      - name: write encrypted sonar token to file
        run: echo '${{ inputs.sonar-login-encrypted }}' >.sonar-login
        if: inputs.sonar-url != ''

      - name: tell GitHub Actions to mask the sonar token in the log
        run: echo "::add-mask::$(ansible-vault decrypt --vault-password-file=.vault-password --output - .sonar-login)"
        if: inputs.sonar-url != ''

      - name: decrypt the sonar token
        run: |
          echo -n "sonar_login_decrypted=">$GITHUB_ENV
          ansible-vault decrypt --vault-password-file=.vault-password --output - .sonar-login >>$GITHUB_ENV
        if: inputs.sonar-url != ''

      - name: send test coverage results to Sonar
        run: >
            docker run --rm 
            -e SONAR_HOST_URL="${{ inputs.sonar-url }}" 
            -e SONAR_LOGIN="${sonar_login_decrypted}" 
            -v ".:/usr/src" 
            sonarsource/sonar-scanner-cli:5 
            -Dsonar.projectKey=${GITHUB_REPOSITORY#*/} 
            -Dsonar.javascript.file.suffixes=.cls 
            -Dsonar.sources=${{ inputs.source-directory }}/main 
            -Dsonar.tests=${{ inputs.source-directory }}/test 
            -Dsonar.coverageReportPaths=reports/coverage/coverage.xml 
            -Dsonar.java.pmd.reportPaths=reports/pmd.xml
            -Dsonar.qualitygate.wait=${{ inputs.sonar-quality-gate == true }}
        if: inputs.sonar-url != ''

      - name: promote package
        run: sfdx package version promote --package "${{ steps.package-version.outputs.id }}" --no-prompt
        if: inputs.promote

      - name: run package version report
        run: |
          echo "## Package version report for ${{ steps.package-info.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          sfdx package version report -p ${{ steps.package-version.outputs.id }} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: delete scratch org
        run: sfdx org delete scratch -p
        if: always()
